name: Release to ZapStore

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v1.2.3 などのタグにマッチ
  workflow_dispatch:  # 手動実行も可能

env:
  FLUTTER_VERSION: '3.9.2'
  RUST_VERSION: '1.75'

jobs:
  build-rust:
    name: Build Rust Libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-linux-android     # arm64-v8a
          - armv7-linux-androideabi   # armeabi-v7a
          - x86_64-linux-android      # x86_64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}
      
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
      
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust/target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build Rust library
        run: |
          cd rust
          
          # アーキテクチャに応じた NDK ターゲット名を設定
          case "${{ matrix.target }}" in
            aarch64-linux-android)
              NDK_TARGET="arm64-v8a"
              ;;
            armv7-linux-androideabi)
              NDK_TARGET="armeabi-v7a"
              ;;
            x86_64-linux-android)
              NDK_TARGET="x86_64"
              ;;
          esac
          
          echo "Building for $NDK_TARGET"
          cargo ndk -t $NDK_TARGET -o ../android/app/src/main/jniLibs build --release
      
      - name: Upload Rust artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-${{ matrix.target }}
          path: android/app/src/main/jniLibs/
          retention-days: 1

  build-apk:
    name: Build Flutter APK
    runs-on: ubuntu-latest
    needs: build-rust
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Download Rust artifacts (arm64-v8a)
        uses: actions/download-artifact@v4
        with:
          name: rust-aarch64-linux-android
          path: android/app/src/main/jniLibs/
      
      - name: Download Rust artifacts (armeabi-v7a)
        uses: actions/download-artifact@v4
        with:
          name: rust-armv7-linux-androideabi
          path: android/app/src/main/jniLibs/
      
      - name: Download Rust artifacts (x86_64)
        uses: actions/download-artifact@v4
        with:
          name: rust-x86_64-linux-android
          path: android/app/src/main/jniLibs/
      
      - name: Verify jniLibs
        run: |
          echo "Checking jniLibs directory structure:"
          find android/app/src/main/jniLibs -type f
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Generate localization
        run: flutter gen-l10n
      
      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks
      
      - name: Create key.properties
        run: |
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=upload-keystore.jks
          EOF
      
      - name: Build APK
        env:
          KEYSTORE_FILE: android/app/upload-keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          flutter build apk --release
      
      - name: Calculate APK hash
        id: apk_hash
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          HASH=$(sha256sum "$APK_PATH" | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "APK SHA256: $HASH"
      
      - name: Get APK size
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "APK Size: $SIZE"
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-apk
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: app-release
          path: ./
      
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Calculate APK hash
        id: apk_hash
        run: |
          HASH=$(sha256sum app-release.apk | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT
      
      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## ZapClock v${{ steps.get_version.outputs.version }}
          
          ### 📱 インストール方法
          
          #### ZapStore 経由 (推奨)
          1. [ZapStore](https://zapstore.dev/) アプリをインストール
          2. "ZapClock" を検索
          3. インストールボタンをタップ
          
          #### 直接インストール
          以下の APK をダウンロードしてインストール:
          - `app-release.apk` (SHA256: `${{ steps.apk_hash.outputs.hash }}`)
          
          ### 📝 変更履歴
          
          このバージョンの変更内容は [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) を参照してください。
          
          ### 🔒 セキュリティ
          
          **APK ハッシュ値 (SHA256)**:
          ```
          ${{ steps.apk_hash.outputs.hash }}
          ```
          
          インストール前に以下のコマンドで検証できます:
          ```bash
          sha256sum app-release.apk
          ```
          
          ### 📚 ドキュメント
          
          - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [ZapStore リリースガイド](https://github.com/${{ github.repository }}/blob/main/ZAPSTORE_RELEASE.md)
          
          ### ⚡ ZapStore 情報
          
          このアプリは Nostr ベースの ZapStore で配布されています。
          - Nostr イベント kind: 32267
          - アプリ ID: `com.zapclock.zap_clock`
          
          ---
          
          Built with ⚡ and ❤️ by the ZapClock Team
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: app-release.apk
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Output release info
        run: |
          echo "✅ Release created successfully!"
          echo "📦 APK URL: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/app-release.apk"
          echo "🔐 SHA256: ${{ steps.apk_hash.outputs.hash }}"
          echo ""
          echo "🚀 Next steps:"
          echo "1. Access ZapStore website: https://zapstore.dev/"
          echo "2. Create or update app entry"
          echo "3. Use the APK URL above"
          echo "4. Publish Nostr event (kind: 32267)"

